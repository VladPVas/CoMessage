//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CoMessageApp.CoMessageService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="CoMessage.Server.Service", ConfigurationName="CoMessageService.ICoMessageService", CallbackContract=typeof(CoMessageApp.CoMessageService.ICoMessageServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ICoMessageService {
        
        [System.ServiceModel.OperationContractAttribute(Action="CoMessage.Server.Service/ICoMessageService/SendMessage", ReplyAction="CoMessage.Server.Service/ICoMessageService/SendMessageResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CoMessage.Model.Common.MessageKind))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CoMessage.Model.Common.MessageStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CoMessage.Model.Common.Message[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CoMessage.Model.Common.UserInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CoMessage.Model.Common.ServiceNotifyData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CoMessage.Model.Common.ServiceNotifyCode))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CoMessage.Model.Common.OperationResults.OperationCode))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CoMessage.Model.Common.OperationResults.MessageArrayResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CoMessage.Model.Common.OperationResults.OperationResultT<CoMessage.Model.Common.Message[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CoMessage.Model.Common.OperationResults.GuidResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CoMessage.Model.Common.OperationResults.OperationResultT<System.Guid>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Drawing.Image))]
        CoMessage.Model.Common.OperationResults.OperationCode SendMessage(CoMessage.Model.Common.Message message, System.Guid chatID);
        
        [System.ServiceModel.OperationContractAttribute(Action="CoMessage.Server.Service/ICoMessageService/SendMessage", ReplyAction="CoMessage.Server.Service/ICoMessageService/SendMessageResponse")]
        System.Threading.Tasks.Task<CoMessage.Model.Common.OperationResults.OperationCode> SendMessageAsync(CoMessage.Model.Common.Message message, System.Guid chatID);
        
        [System.ServiceModel.OperationContractAttribute(Action="CoMessage.Server.Service/ICoMessageService/EditMessage", ReplyAction="CoMessage.Server.Service/ICoMessageService/EditMessageResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CoMessage.Model.Common.MessageKind))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CoMessage.Model.Common.MessageStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CoMessage.Model.Common.Message[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CoMessage.Model.Common.UserInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CoMessage.Model.Common.ServiceNotifyData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CoMessage.Model.Common.ServiceNotifyCode))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CoMessage.Model.Common.OperationResults.OperationCode))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CoMessage.Model.Common.OperationResults.MessageArrayResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CoMessage.Model.Common.OperationResults.OperationResultT<CoMessage.Model.Common.Message[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CoMessage.Model.Common.OperationResults.GuidResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CoMessage.Model.Common.OperationResults.OperationResultT<System.Guid>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Drawing.Image))]
        CoMessage.Model.Common.OperationResults.OperationCode EditMessage(CoMessage.Model.Common.Message newMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="CoMessage.Server.Service/ICoMessageService/EditMessage", ReplyAction="CoMessage.Server.Service/ICoMessageService/EditMessageResponse")]
        System.Threading.Tasks.Task<CoMessage.Model.Common.OperationResults.OperationCode> EditMessageAsync(CoMessage.Model.Common.Message newMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="CoMessage.Server.Service/ICoMessageService/GetChatMessagesOfUser", ReplyAction="CoMessage.Server.Service/ICoMessageService/GetChatMessagesOfUserResponse")]
        CoMessage.Model.Common.OperationResults.MessageArrayResult GetChatMessagesOfUser(System.Guid chatID, System.Guid userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="CoMessage.Server.Service/ICoMessageService/GetChatMessagesOfUser", ReplyAction="CoMessage.Server.Service/ICoMessageService/GetChatMessagesOfUserResponse")]
        System.Threading.Tasks.Task<CoMessage.Model.Common.OperationResults.MessageArrayResult> GetChatMessagesOfUserAsync(System.Guid chatID, System.Guid userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="CoMessage.Server.Service/ICoMessageService/ChatHasUser", ReplyAction="CoMessage.Server.Service/ICoMessageService/ChatHasUserResponse")]
        bool ChatHasUser(System.Guid chatID, System.Guid userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="CoMessage.Server.Service/ICoMessageService/ChatHasUser", ReplyAction="CoMessage.Server.Service/ICoMessageService/ChatHasUserResponse")]
        System.Threading.Tasks.Task<bool> ChatHasUserAsync(System.Guid chatID, System.Guid userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="CoMessage.Server.Service/ICoMessageService/Signup", ReplyAction="CoMessage.Server.Service/ICoMessageService/SignupResponse")]
        CoMessage.Model.Common.OperationResults.GuidResult Signup(CoMessage.Model.Common.UserInfo userInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="CoMessage.Server.Service/ICoMessageService/Signup", ReplyAction="CoMessage.Server.Service/ICoMessageService/SignupResponse")]
        System.Threading.Tasks.Task<CoMessage.Model.Common.OperationResults.GuidResult> SignupAsync(CoMessage.Model.Common.UserInfo userInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="CoMessage.Server.Service/ICoMessageService/Login", ReplyAction="CoMessage.Server.Service/ICoMessageService/LoginResponse")]
        CoMessage.Model.Common.OperationResults.GuidResult Login([System.ServiceModel.MessageParameterAttribute(Name="login")] string login1, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="CoMessage.Server.Service/ICoMessageService/Login", ReplyAction="CoMessage.Server.Service/ICoMessageService/LoginResponse")]
        System.Threading.Tasks.Task<CoMessage.Model.Common.OperationResults.GuidResult> LoginAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="CoMessage.Server.Service/ICoMessageService/Logout", ReplyAction="CoMessage.Server.Service/ICoMessageService/LogoutResponse")]
        void Logout(System.Guid userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="CoMessage.Server.Service/ICoMessageService/Logout", ReplyAction="CoMessage.Server.Service/ICoMessageService/LogoutResponse")]
        System.Threading.Tasks.Task LogoutAsync(System.Guid userID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICoMessageServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="CoMessage.Server.Service/ICoMessageService/ReceiveMessage")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CoMessage.Model.Common.MessageKind))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CoMessage.Model.Common.MessageStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CoMessage.Model.Common.Message[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CoMessage.Model.Common.UserInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CoMessage.Model.Common.ServiceNotifyData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CoMessage.Model.Common.ServiceNotifyCode))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CoMessage.Model.Common.OperationResults.OperationCode))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CoMessage.Model.Common.OperationResults.MessageArrayResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CoMessage.Model.Common.OperationResults.OperationResultT<CoMessage.Model.Common.Message[]>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CoMessage.Model.Common.OperationResults.GuidResult))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CoMessage.Model.Common.OperationResults.OperationResultT<System.Guid>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Drawing.Image))]
        void ReceiveMessage(CoMessage.Model.Common.Message message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="CoMessage.Server.Service/ICoMessageService/DeleteMessage")]
        void DeleteMessage(System.Guid messageID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="CoMessage.Server.Service/ICoMessageService/ServiceNotify")]
        void ServiceNotify(CoMessage.Model.Common.ServiceNotifyData notifyData);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICoMessageServiceChannel : CoMessageApp.CoMessageService.ICoMessageService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CoMessageServiceClient : System.ServiceModel.DuplexClientBase<CoMessageApp.CoMessageService.ICoMessageService>, CoMessageApp.CoMessageService.ICoMessageService {
        
        public CoMessageServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public CoMessageServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public CoMessageServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CoMessageServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CoMessageServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public CoMessage.Model.Common.OperationResults.OperationCode SendMessage(CoMessage.Model.Common.Message message, System.Guid chatID) {
            return base.Channel.SendMessage(message, chatID);
        }
        
        public System.Threading.Tasks.Task<CoMessage.Model.Common.OperationResults.OperationCode> SendMessageAsync(CoMessage.Model.Common.Message message, System.Guid chatID) {
            return base.Channel.SendMessageAsync(message, chatID);
        }
        
        public CoMessage.Model.Common.OperationResults.OperationCode EditMessage(CoMessage.Model.Common.Message newMessage) {
            return base.Channel.EditMessage(newMessage);
        }
        
        public System.Threading.Tasks.Task<CoMessage.Model.Common.OperationResults.OperationCode> EditMessageAsync(CoMessage.Model.Common.Message newMessage) {
            return base.Channel.EditMessageAsync(newMessage);
        }
        
        public CoMessage.Model.Common.OperationResults.MessageArrayResult GetChatMessagesOfUser(System.Guid chatID, System.Guid userID) {
            return base.Channel.GetChatMessagesOfUser(chatID, userID);
        }
        
        public System.Threading.Tasks.Task<CoMessage.Model.Common.OperationResults.MessageArrayResult> GetChatMessagesOfUserAsync(System.Guid chatID, System.Guid userID) {
            return base.Channel.GetChatMessagesOfUserAsync(chatID, userID);
        }
        
        public bool ChatHasUser(System.Guid chatID, System.Guid userID) {
            return base.Channel.ChatHasUser(chatID, userID);
        }
        
        public System.Threading.Tasks.Task<bool> ChatHasUserAsync(System.Guid chatID, System.Guid userID) {
            return base.Channel.ChatHasUserAsync(chatID, userID);
        }
        
        public CoMessage.Model.Common.OperationResults.GuidResult Signup(CoMessage.Model.Common.UserInfo userInfo) {
            return base.Channel.Signup(userInfo);
        }
        
        public System.Threading.Tasks.Task<CoMessage.Model.Common.OperationResults.GuidResult> SignupAsync(CoMessage.Model.Common.UserInfo userInfo) {
            return base.Channel.SignupAsync(userInfo);
        }
        
        public CoMessage.Model.Common.OperationResults.GuidResult Login(string login1, string password) {
            return base.Channel.Login(login1, password);
        }
        
        public System.Threading.Tasks.Task<CoMessage.Model.Common.OperationResults.GuidResult> LoginAsync(string login, string password) {
            return base.Channel.LoginAsync(login, password);
        }
        
        public void Logout(System.Guid userID) {
            base.Channel.Logout(userID);
        }
        
        public System.Threading.Tasks.Task LogoutAsync(System.Guid userID) {
            return base.Channel.LogoutAsync(userID);
        }
    }
}
